services:
  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      AZT3KNET_ENVIRONMENT: ${AZT3KNET_ENVIRONMENT:-development}
      AZT3KNET_LOG_LEVEL: ${AZT3KNET_LOG_LEVEL:-INFO}
      AZT3KNET_COMPLIANCE_ENABLED: ${AZT3KNET_COMPLIANCE_ENABLED:-true}
      ENABLE_METRICS: ${ENABLE_METRICS:-true}
      ENABLE_TRACING: ${ENABLE_TRACING:-true}
      API_APP_MODULE: ${API_APP_MODULE:-azt3knet.api.main:app}
      API_RELOAD_FLAG: ${API_RELOAD_FLAG:---reload}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      DATABASE_BACKEND: ${DATABASE_BACKEND:-postgres}
      DATABASE_URL: ${DATABASE_URL:-postgresql+psycopg://azt3knet:azt3knet@postgres:5432/azt3knet}
      REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
      QUEUE_POPULATION: ${QUEUE_POPULATION:-population}
      QUEUE_CONTENT: ${QUEUE_CONTENT:-content}
      QUEUE_SIMULATION: ${QUEUE_SIMULATION:-simulation}
      PROMETHEUS_PORT: ${PROMETHEUS_PORT:-9000}
      OTEL_EXPORTER_OTLP_ENDPOINT: ${OTEL_EXPORTER_OTLP_ENDPOINT:-http://localhost:4317}
      OTEL_SERVICE_NAME: ${OTEL_SERVICE_NAME:-azt3knet}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://ollama:11434}
      OLLAMA_MODEL: ${OLLAMA_MODEL:-deepseek-r1:1.5b}
      OLLAMA_TIMEOUT: ${OLLAMA_TIMEOUT:-30}
      MINIO_ENDPOINT: ${MINIO_ENDPOINT_INTERNAL:-http://minio:9000}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY:-azt3knet}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY:-azt3knet123}
      MINIO_REGION: ${MINIO_REGION:-us-east-1}
      MINIO_USE_SSL: ${MINIO_USE_SSL:-false}
      AZT3KNET_BLOB_BUCKET: ${AZT3KNET_BLOB_BUCKET:-azt3knet}
      AZT3KNET_AUTO_BOOTSTRAP_MAILCOW: ${AZT3KNET_AUTO_BOOTSTRAP_MAILCOW:-1}
    volumes:
      - ./:/app
    command:
      - sh
      - -c
      - >-
        uvicorn ${API_APP_MODULE:-azt3knet.api.main:app}
        --host ${API_HOST:-0.0.0.0}
        --port ${API_PORT:-8000}
        ${API_RELOAD_FLAG:---reload}
    ports:
      - "${API_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${API_PORT:-8000}/healthz || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ollama:
        condition: service_started
      minio:
        condition: service_healthy

  cloudflared:
    image: ${CLOUDFLARED_IMAGE:-cloudflare/cloudflared:2024.8.1}
    restart: unless-stopped
    command:
      - tunnel
      - --no-autoupdate
      - run
      - --token
      - ${CLOUDFLARE_TUNNEL_TOKEN}
    environment:
      TUNNEL_HOSTNAME: ${CLOUDFLARE_TUNNEL_HOSTNAME:-}
      TUNNEL_SERVICE: ${CLOUDFLARE_TUNNEL_SERVICE:-http://api:8000}
    depends_on:
      api:
        condition: service_started
    profiles:
      - cloudflare

  postgres:
    image: ${POSTGRES_IMAGE:-pgvector/pgvector:pg16}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-azt3knet}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-azt3knet}
      POSTGRES_DB: ${POSTGRES_DB:-azt3knet}
      POSTGRES_ENABLE_TIMESCALEDB: ${POSTGRES_ENABLE_TIMESCALEDB:-false}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-256MB}
      TIMESCALEDB_MAX_MEMORY: ${TIMESCALEDB_MAX_MEMORY:-512MB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./infra/docker/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-azt3knet} -d ${POSTGRES_DB:-azt3knet}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  redis:
    image: ${REDIS_IMAGE:-redis:7-alpine}
    restart: unless-stopped
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 5s

  ollama:
    image: ${OLLAMA_IMAGE:-ollama/ollama:latest}
    restart: unless-stopped
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    volumes:
      - ollama-data:/root/.ollama
    healthcheck:
      test: ["CMD-SHELL", "ollama list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s

  minio:
    image: ${MINIO_IMAGE:-minio/minio:latest}
    restart: unless-stopped
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-azt3knet}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-azt3knet123}
    command: ["server", "/data", "--console-address", ":${MINIO_CONSOLE_PORT:-9001}"]
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

  prometheus:
    image: ${PROMETHEUS_IMAGE:-prom/prometheus:v2.53.1}
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    volumes:
      - ./infra/observability/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "${PROMETHEUS_SERVER_PORT:-9090}:9090"
    depends_on:
      api:
        condition: service_started

  grafana:
    image: ${GRAFANA_IMAGE:-grafana/grafana:10.4.3}
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-azt3knet}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./infra/observability/grafana:/etc/grafana/provisioning:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      prometheus:
        condition: service_started

  playwright:
    image: ${PLAYWRIGHT_IMAGE:-mcr.microsoft.com/playwright/python:v1.45.0-jammy}
    profiles:
      - testing
    working_dir: /workspace
    environment:
      PLAYWRIGHT_BROWSERS_PATH: 0
    entrypoint: ["bash", "-lc"]
    command: ["tail -f /dev/null"]
    volumes:
      - ./:/workspace
    depends_on:
      api:
        condition: service_started

volumes:
  postgres-data:
  ollama-data:
  minio-data:
  grafana-data:
